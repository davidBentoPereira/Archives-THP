/*
* Fonctionnalit√© 1 : On commence par un petit √©chauffement : lorsque l'utilisateur va cliquer sur le footer (portant le tag <footer>), tu vas afficher le mot "clique" en console.
* Cette fonctionnalit√© doit √™tre cod√©e avec un addEventListener("click", function(){ } car c'est une bonne habitude √† prendre ! üòá
*/
let footerElmt = document.querySelector('footer');
footerElmt.addEventListener('click', function() {
  console.log('clique');
});

/*
* Fonctionnalit√© 1-bis :
* Maintenant on va upgrader cette premi√®re fonctionnalit√© : lorsque l'utilisateur va cliquer sur le footer, tu vas afficher en console "clic num√©ro x"
* avec x qui commence √† 1 et s'incr√©mente de +1 √† chaque clic.
*/
let count = 1;
footerElmt.addEventListener('click', function() {
  console.log('clic num√©ro #' + count);
  count += 1;
});

/*
* Fonctionnalit√© 2 :
* On va enfin faire fonctionner ce satan√© "Hamburger Menu" qui s'affiche depuis le d√©but mais qui n'actionne rien quand on clique dessus.
* C'est quoi un "hamburger menu" ? C'est √ßa, ce bouton avec trois lignes horizontales en haut √† droite de la navbar.
* Tu vas faire que si quelqu'un clique sur ce bouton, l'√©l√©ment HTML portant l'Id navbarHeader perde sa classe collapse.
* Une fois que √ßa, √ßa marche, fait que si on clique √† nouveau dessus, la classe collapse soit rajout√©e √† nouveau √† l'√©l√©ment portant l'Id navbarHeader.
*/
let navbarHeaderElmt = document.getElementById('navbarHeader');
let collapsed = true;

navbarHeaderElmt.addEventListener('click', function() {
  if (collapsed === true) {
    navbarHeaderElmt.classList.remove('collapse');
    collapsed = false
  } else {
    navbarHeaderElmt.classList.add('collapse');
    collapsed = true
  }
});

/*
* Fonctionnalit√© 3 :
* √Ä pr√©sent, on va faire cela : si on clique sur le bouton "Edit" de la premi√®re card, le texte de la card va se mettre en rouge de fa√ßon
* irr√©versible (sauf si on recharge la page). √Ä toi de jouer !
*/
let btnEditElmt = document.querySelectorAll('.btn.btn-sm.btn-outline-secondary')[0];

btnEditElmt.addEventListener('click', function() {
  btnEditElmt.style.color = 'red';
});

/*
* Fonctionnalit√© 4 :
* On va faire quelque chose de similaire √† la fonctionnalit√© 3 mais un peu plus complexe : si on clique sur le bouton "Edit" de la deuxi√®me card,
* le texte de la card va se mettre en vert. Si on re-clique dessus, il redevient comme avant ! Tu l'as compris, il va falloir que tu cherches
* comment faire un "toggle" sur le style du texte. C'est plus compliqu√© que sur une classe.
*/
let btnEdit2Elmt = document.querySelectorAll('.btn.btn-sm.btn-outline-secondary')[1];
btnEdit2Elmt.style.color = 'grey';

btnEdit2Elmt.addEventListener('click', function() {
  if (btnEdit2Elmt.style.color === 'grey') {
    btnEdit2Elmt.style.color = 'green';
  } else {
    btnEdit2Elmt.style.color = 'grey';
  }
});

/*
* Fonctionnalit√© 5 :
* Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø. Et comme elle est un peu dangereuse, on va la cacher‚Ä¶
* Voici comment elle doit marcher : si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt et la page
* s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au fichier CSS. Si possible, rends cette fonctionnalit√©
* r√©versible (un nouveau double-clic fait tout revenir √† la normale).
*/
document.querySelector("header").addEventListener("dblclick", function(){
  if (document.querySelector("link").disabled === false) {
    document.querySelector("link").disabled = true ;
  } else {
    document.querySelector("link").disabled = false ;
  }
});

/*
* Fonctionnalit√© 6 :
* T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction ! C'est top ! On va commencer √† corser les choses.
* La fonctionnalit√© sera la suivante : si un utilisateur passe sa souris sur le bouton "View" d'une card
* (n'importe laquelle), celle-ci va se r√©duire. Cela veut dire que le texte dispara√Æt, l'image n'appara√Ætra
* qu'√† 20 % de sa taille d'origine et les boutons "Edit" / "View" restent visibles. Cette fonction sera
* r√©versible : s'il repasse sa souris, la card redevient normale !
*/
let btnViewElmt = document.querySelectorAll('.btn-success')
let textElmt = document.querySelectorAll('.card-text')
let imgElmt = document.querySelectorAll('.card-img-top')

for (let i = 0; i < btnViewElmt.length; i++) {
  btnViewElmt[i].addEventListener('mouseover', function () {
    if (textElmt[i].style.display !== 'none') {
      imgElmt[i].style.width = '20%'
      textElmt[i].style.display = 'none'
    } else {
      imgElmt[i].style.width = '100%'
      textElmt[i].style.display = ''
    }
  })
}

/*
* Fonctionnalit√© 7 :
* Allez on va rajouter un peu de WTF dans la page : si un utilisateur clique sur le bouton gris ==>, la derni√®re card
* (en bas √† droite) va passer en premier (en haut √† gauche). On va pouvoir faire tourner les cards !
* Petite remarque : tu vas r√©aliser que si tu m√©langes les cards, il est fort probable que la fonctionnalit√© 6 va se
*  mettre √† faire n'importe quoi. Si tu survoles un bouton "View", c'est une autre card qui va se r√©duire.
*  Si tu arrives √† corriger √ßa, c'est cool mais la consigne est d'ignorer ce souci pour le moment.
*/
let cardGridElemt = document.querySelector('.album > .container > .row');
let btnRightElmt = document.querySelector('.btn.btn-secondary.my-2');

btnRightElmt.addEventListener('click', function (e) {
  e.preventDefault();
  cardGridElemt.insertBefore(cardGridElemt.lastElementChild, cardGridElemt.firstElementChild);
})

/*
* Fonctionnalit√© 8 :
√âvidemment tu t'y attendais : on va faire tourner les card dans l'autre sens aussi. Donc si un utilisateur clique
* sur le bouton bleu <==, la premi√®re card devra passer en dernier. √Ä premi√®re vue, tu te dis que si tu as r√©ussi
* √† faire la fonctionnalit√© pr√©c√©dente, celle-ci c'est du gateau... sauf qu'il y a quelques pi√®ges.
*/
let btnLeftElmt = document.querySelector('section .btn-primary');

btnLeftElmt.removeAttribute('href');

btnLeftElmt.addEventListener('click', function (event) {
  event.stopPropagation();
  cardGridElemt.insertBefore(cardGridElemt.firstElementChild, cardGridElemt.lastElementChild.nextSibling);
})

/*
* Fonctionnalit√© 9 :
* Bon si t'es arriv√© jusque-l√†, c'est que t'as besoin d'un peu de challenge.
* Du coup je t'ai concoct√© une fonctionnalit√© de derri√®re les fagots, sp√©cialement con√ßue
* pour les moussaillons pas piqu√©s des hannetons (this sentence is brought to you by www.vieilles-expressions.fr). Voici ce qu'elle va devoir faire :
*   La fonctionnalit√© se d√©clenchera si le logo de la page (JS & Events) est s√©lectionn√© et qu'on appuie sur une touche sp√©cifique du clavier.
*   Si l'utilisateur presse la touche "a", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† gauche de l'√©cran.
*   Si l'utilisateur presse la touche "y", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap au milieu de l'√©cran.
*   Si l'utilisateur presse la touche "p", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† droite de l'√©cran.
*   Si l'utilisateur presse la touche "b", tout redevient normal.
*/
// https://css-tricks.com/snippets/javascript/javascript-keycodes/
// https://developer.mozilla.org/fr/docs/Web/API/KeyboardEvent
let logoElmt = document.getElementsByClassName('navbar-brand')[0];

logoElmt.addEventListener('click', function() {
  document.addEventListener('click', function (e){
    if(e.key === 'a') {
      document.body.className = '';
      document.body.classList.add('col-4');
    } else if (e.key ==='y') {
      document.body.className = '';
      document.body.classList.add('offset-4', 'col-4');
    } else if (e.key ==='p') {
      document.body.className = '';
      document.body.classList.add('offset-8', 'col-4');
    } else if (e.key ==='b') {
      document.body.className = '';
    }
  });
})
